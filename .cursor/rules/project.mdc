---
description: High-level project structure
globs: 
alwaysApply: false
---
## Build/Development Commands

- **Start the application**: `deno task start`
- **Development mode**: `deno task dev`
- **Format, lint, and check code**: `deno task prep`
- **Format code**: `deno fmt`
- **Lint code**: `deno lint --fix`
- **Type-check code**: `deno check main.ts`

## Project Structure

```markdown
deno.json         # Project configuration
main.ts           # The main entry point
src/              
├── app/                        
│   ├── App.ts                  # The main application class
│   ├── config.ts               # Configuration for the server
│   ├── express.ts              # Express server code
│   ├── inMemoryEventStore.ts   # In-memory event store for for session resumability
│   └── utils.ts                # Utility functions for the application
├── tools/                             
│   ├── knowledgeGraph/                 # The knowledge graph MCP tool
│   │   ├── knowledgeGraphManager.ts    # The knowledge graph class
│   │   ├── methods.ts                  # Adaptors for converting graph function to MCP tool calls
│   │   ├── mod.ts                      # Provides a single point of export for the knowledge graph
│   │   ├── schema.ts                   # The input schema for the knowledge graph tool
│   │   └── types.ts                    # Shared types for the knowledge graph tool
│   └── mod.ts      # Provides a single point of export for all the MCP tools
├── constants.ts    # Shared constants for the server and application
├── server.ts       # The MCP server
├── types.ts        # Shared types for the MCP server
└── utils.ts        # Shared utility functions for the MCP server
static/             
├── .well-known/    
│   ├── llms.txt        # An example llms.txt giving LLMs information about the server    
│   └── openapi.yaml    # An example OpenAPI specification for the server 
vendor/
└── schema.ts   # The 2025-06-18 MCP schema from Anthropic
```

## Code Style Guidelines

- **Formatting**: 100 character line width, 2-space indentation, semicolons required, single quotes preferred
- **Imports**: Use JSR imports (`jsr:`) or npm imports (`npm:`) with explicit paths. ES module style, include `.ts` extension, group imports logically
- **Types**: Define interfaces for data structures, use explicit return types
- **Naming**: camelCase for variables/functions, PascalCase for classes/types
- **Documentation**: JSDoc comments for functions/interfaces with @author, @description tags. JSDoc for public APIs, inline comments for complex logic
- **Error Handling**: Use try/catch blocks with descriptive error messages. Use TypeScript's strict mode, explicit error checking in tests
- **TypeScript**: Enable strict mode, noImplicitAny, verbatimModuleSyntax, Strict type checking, ES modules, explicit return types
- **Structure**: Place core functionality in src/, route handlers in routes/
- **Deno Standards**: Use Deno KV for storage, follow Deno's security practices

## Best Practices

- **Environment Variables**: Load using `@std/dotenv/load` in the top-level and access with `Deno.env.get()`
- **File Paths**: Use `@std/path` for cross-platform file path handling
- **Data Validation**: Use zod schemas for data validation
- **HTTP Responses**: Return proper status codes and structured JSON responses
- **Transactions**: Use `kv.atomic()` for Deno KV transactions when updating multiple records
- **Error Handling**: Provide detailed error messages but avoid exposing sensitive information
- **Tool Implementation**: Follow the MCP schema for defining tool schemas and handlers

## Docs

[MCP Typescript SDK]: https://github.com/modelcontextprotocol/typescript-sdk

[MCP llms.txt]: https://modelcontextprotocol.io/llms-full.txt

[Deno KV]: https://docs.deno.com/api/deno/~/Deno.Kv
